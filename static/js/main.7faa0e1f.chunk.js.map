{"version":3,"sources":["components/Error.js","components/Loading.js","components/Todo.js","components/Todos.js","App.js","reportWebVitals.js","index.js"],"names":["Error","props","children","displayName","Loading","Todo","id","complete","text","useMutation","RemoveTodo","mutation","executeMutation","onClick","className","fetching","Todos","useQuery","query","TodoQuery","res","todos","useMemo","data","error","message","map","todo","gql","storage","makeDefaultStorage","idbName","maxAge","cache","offlineExchange","clientConfig","url","exchanges","dedupExchange","fetchExchange","requestPolicy","App","useState","isLoggedIn","setIsLoggedIn","client","console","log","createClient","app","value","previousValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAEaA,EAAQ,SAAAC,GAAK,OACxB,qCACE,uCACA,qDACA,0CAAaA,EAAMC,gBAIvBF,EAAMG,YAAc,QCRb,IAAMC,EAAU,kBAAM,4CAE7BA,EAAQD,YAAc,UCDf,IAAME,EAAO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAAW,EACVC,YAAYC,GADF,mBACvCC,EADuC,KAC7BC,EAD6B,KAK9C,OACE,qBAAIC,QAHe,kBAAMD,EAAgB,CAAEN,QAG3C,UACE,mBAAGQ,UAAWP,EAAW,gBAAkB,GAA3C,SAAgDC,IAC/CG,EAASI,UAAY,kDAK5BV,EAAKF,YAAc,OAEnB,I,EAAMO,EAAU,8E,wBCbHM,EAAQ,WAAO,IAAD,EACGC,YAAS,CAAEC,MAAOC,IADrB,mBAClBC,EADkB,KAGnBC,GAHmB,KAGXC,mBAAQ,WACpB,OAAIF,EAAIL,WAAaK,EAAIG,KAChB,cAAC,EAAD,IAGLH,EAAII,MACC,cAAC,EAAD,UAAQJ,EAAII,MAAMC,UAIzB,6BACGL,EAAIG,KAAKF,MAAMK,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,eAAwBA,GAAbA,EAAKrB,WAIrB,CAACc,KAEJ,OACE,qCACE,uCACCC,MAKPL,EAAMb,YAAc,QAEpB,IAAMgB,EAAYS,YAAH,sGCxBTC,EAAUC,YAAmB,CACjCC,QAAS,gBACTC,OAAQ,IAGJC,EAAQC,YAAgB,CAC5BL,YAGIM,EAAe,CACnBC,IAAK,wCACLC,UAAW,CACTC,IACAL,EACAM,KAEFC,cAAe,eA6BFC,EA1BH,WAAO,IAAD,EACoBC,oBAAS,GAD7B,mBACTC,EADS,KACGC,EADH,KAKVC,EAASvB,mBAAQ,WACrB,OAAKqB,GAILG,QAAQC,IAAI,gBACLC,YAAab,IAJX,OAKR,CAACQ,IAEEM,EAAM,cAAC,IAAD,CAAUC,MAAOL,EAAjB,SACT,cAAC,EAAD,MAGH,OACI,iCACE,wBAAQhC,QAlBS,WACrB+B,GAAc,SAACO,GAAD,OAAoBA,MAiB9B,0BACCR,GAAcM,MCxCRG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7faa0e1f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Error = props => (\n  <>\n    <h4>Error</h4>\n    <p>Something went wrong</p>\n    <p>Message: {props.children}</p>\n  </>\n);\n\nError.displayName = \"Error\";\n","import React from \"react\";\n\nexport const Loading = () => <p>Loading...</p>;\n\nLoading.displayName = \"Loading\";\n","import React from \"react\";\nimport { useMutation } from \"urql\";\n\nexport const Todo = ({ id, complete, text }) => {\n  const [mutation, executeMutation] = useMutation(RemoveTodo);\n\n  const handleToggle = () => executeMutation({ id });\n\n  return (\n    <li onClick={handleToggle}>\n      <p className={complete ? \"strikethrough\" : \"\"}>{text}</p>\n      {mutation.fetching && <span>(updating)</span>}\n    </li>\n  );\n};\n\nTodo.displayName = \"Todo\";\n\nconst RemoveTodo = `\n  mutation($id: ID!) {\n    toggleTodo(id: $id) {\n      id\n    }\n  }\n`;\n","import React, { useCallback, useMemo } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"urql\";\nimport { Loading, Error, Todo } from \".\";\n\nexport const Todos = () => {\n  const [res, executeQuery] = useQuery({ query: TodoQuery });\n\n  const todos = useMemo(() => {\n    if (res.fetching || !res.data) {\n      return <Loading />;\n    }\n\n    if (res.error) {\n      return <Error>{res.error.message}</Error>;\n    }\n\n    return (\n      <ul>\n        {res.data.todos.map((todo) => (\n          <Todo key={todo.id} {...todo} />\n        ))}\n      </ul>\n    );\n  }, [res]);\n\n  return (\n    <>\n      <h1>Todos</h1>\n      {todos}\n    </>\n  );\n};\n\nTodos.displayName = \"Todos\";\n\nconst TodoQuery = gql`\n  query {\n    todos {\n      id\n      text\n      complete\n    }\n  }\n`;\n","import React, { useState, useMemo } from \"react\";\nimport {\n  createClient,\n  dedupExchange,\n  fetchExchange,\n  Provider\n} from \"urql\";\n\nimport { offlineExchange } from \"@urql/exchange-graphcache\";\nimport { makeDefaultStorage } from \"@urql/exchange-graphcache/default-storage\";\nimport { Todos } from \"./components\";\n\nconst storage = makeDefaultStorage({\n  idbName: \"graphcache-v3\", // The name of the IndexedDB database\n  maxAge: 7 // The maximum age of the persisted data in days\n});\n\nconst cache = offlineExchange({\n  storage\n});\n\nconst clientConfig = {\n  url: \"https://0ufyz-4000.sse.codesandbox.io\",\n  exchanges: [\n    dedupExchange,\n    cache,\n    fetchExchange\n  ],\n  requestPolicy: \"cache-first\"\n};\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const toggleLoggedIn = () => {\n    setIsLoggedIn((previousValue) => !previousValue);\n  };\n  const client = useMemo(() => {\n    if (!isLoggedIn) {\n      return null;\n    }\n\n    console.log('createClient');\n    return createClient(clientConfig);\n  }, [isLoggedIn]);\n\n  const app = <Provider value={client}>\n     <Todos />\n  </Provider>\n\n  return (\n      <main>\n        <button onClick={toggleLoggedIn}>Toggle login</button>\n        {isLoggedIn && app}\n      </main>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}